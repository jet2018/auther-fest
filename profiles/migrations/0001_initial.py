# Generated by Django 3.2.12 on 2022-05-03 19:10

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields
import profiles.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0014_auto_20220410_0832'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('profile_picture', models.ImageField(upload_to='')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('middle_name', models.CharField(blank=True, max_length=40, null=True)),
                ('other_name', models.CharField(blank=True, max_length=40, null=True)),
                ('gender', models.CharField(blank=True, choices=[('female', 'Female'), ('male', 'Male'), ('secret', 'Rather not say'), ('other', 'Other, mention')], max_length=12, null=True)),
                ('other_gender', models.CharField(blank=True, max_length=100, null=True, verbose_name='Other gender')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='phone number')),
                ('pronoun', models.CharField(blank=True, choices=[('he', 'He/Him/His'), ('she', 'She/Her/Hers'), ('both', 'Both'), ('custom', 'Custom')], max_length=12, null=True)),
                ('custom_pronoun', models.CharField(blank=True, max_length=100, null=True, verbose_name='custom pronoun')),
                ('country', models.CharField(blank=True, max_length=30, null=True)),
                ('region', models.CharField(blank=True, max_length=30, null=True)),
                ('address', models.CharField(blank=True, max_length=60, null=True)),
                ('language', models.CharField(blank=True, max_length=60, null=True)),
                ('occupation', models.CharField(blank=True, max_length=60, null=True)),
                ('status', models.CharField(blank=True, max_length=34, null=True, verbose_name='marital status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', profiles.models.MyUserManager()),
            ],
        ),
    ]
